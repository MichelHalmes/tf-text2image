from collections import namedtuple
import tensorflow_datasets as tfds
import tensorflow as tf

import config
from data.generate import generate_sample


Encoders = namedtuple("encoders", ["chars", "spec", "image"])


class CharTokenizer(object):
    def tokenize(self, s):
        """Splits a string into tokens."""
        s = tf.compat.as_text(s)
        return list(s)

    def join(self, tokens):
        """Joins tokens into a string."""
        return "".join(tokens)


def get_chars_encoder():
    vocab_list = list(config.CHARS_ALPHABETH + config.EOS_CHAR)
    chars_encoder = tfds.features.text.TokenTextEncoder(
        vocab_list,
        tokenizer=CharTokenizer(),
        decode_token_separator=''
    )
    return chars_encoder


class SpecTokenizer(object):
    def tokenize(self, s):
        """Splits a string into tokens."""
        s = tf.compat.as_text(s)
        return s.split(" ")

    def join(self, tokens):
        """Joins tokens into a string."""
        return " ".join(tokens)


def get_spec_encoder():
    # tokenizer = tfds.features.text.Tokenizer()
    tokenizer = SpecTokenizer()

    vocabulary_set = set(config.EOS_CHAR)
    no_update_cnt = 0
    while no_update_cnt < 100:
        _, spec, _ = generate_sample()
        tokens = tokenizer.tokenize(spec)
        if tokens:
            no_update_cnt += 1
            vocabulary_set.update(tokens)

    vocab_list = sorted(vocabulary_set)
    spec_encoder = tfds.features.text.TokenTextEncoder(
        vocab_list,
        tokenizer=tokenizer)
    return spec_encoder


class ImageNormalizer(object):
    def encode(self, image):
        # Encode the image to be centered around 0
        # and so it can be generated by an tanh
        # Note: we could do the appropriate normalization as part of the model,
        # which would be cleaner, but this is more fun...
        return image * 2. - 1.  # [0, 1] -> [-1, +1]

    def decode(self, image):
        # Decode to be in standard image range
        return image * .5 + .5  # [-1, +1] -> [0, 1]


def get_encoders():
    return Encoders(
        get_chars_encoder(),
        get_spec_encoder(),
        ImageNormalizer()
    )
